
Continuous Integration with Jenkins:
===============================================
Install jenkins:
=====================

# apt update

Install java 

# sudo apt install default-jre

Install jenkins:

# sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

# echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null

# apt-get update

# apt-get install jenkins

# systemctl start jenkins

# systemctl status jenkins

Set up dashboad
We need to now  set up jenkins dashboard

For this, take public ip address of ec2 server, copy it and go to your browser and give

publicipaddress:8080

On the ec2 server, execute below command

$ cat /var/lib/jenkins/secrets/initialAdminPassword

Copy the password and paste in the browser (jenkins)

Click on continue

Click on Jenkins suggested plugin tab(on left side)

On the next page

Username: admin
Password : admin
Retype password: admin
Email: admin@gmail.com

Click on continue

Click on finish

You will be on the jenkins dashboard




Go to lab terminal

Execute:

$ sudo su -

$ systemctl start jenkins

$ systemctl status jenkins

Go to browser

Give following url 
localhost:8080

Login with following details:

Username: admin
Password: admin

Note: the Jenkins home directory is /var/lib/jenkins


Creation of a Job:
************************************

#1 Jenkins --> Click on New Item --> give name as Job1 --> Select freestyle project →press oK button

Got to Build tab -->select execute shell command---> write the below commands:

echo "hello Jenkins!"
touch sonal


Save --> click on Build Now  --> click on build number --> click on Console to see output

You can find the workspace directory on the terminal at:

# cd /var/lib/jenkins/workspace

Go to your job directory, you will find the output files


Demo 2: Jenkins integration with Git & github
============================================

Jenkins --> New Item -->give name as  cloneRepo -->Click on Freestyle Project→ click on source code management Tab -->select git---> give repository URL→ https://github.com/Sonal0409/DevOpsCodeDemo.git

Select branch name as master.

Save --> click on Build Now  --> click on build number --> click on Console to see output
Click on the workspace folder on the left side  to see the cloned repository files.


MAVEN : 
=========================================

> It is a powerful tool which helps in building, managing and documenting your project

> Maven by heart is a plugin based tool

> whenever a maven plugin or command is executed, its output will be stored in folder called target

> It has 2 types of plugins:

build plugins:

Task  						Plugin					GOAL/Commands 	output

Compile the code  			Compiler				mvn compile		class files

execute some Testcases		Surefire				mvn test		test passed/failed status

Package the code			package					mvn package     .war file

Clean the previous build	clean					mvn clean		clean up from target folder
files

Deploy artifact on 			deploy					mvn deploy
artifactory

install all dependencies	install					mvn install


In maven multiple goals can be executed together

# mvn clean install package

Reporting plugins:
==============================
Will always generate reports, and in maven the reports are mostly generated in the format : xml,html,txt

Task  						Plugin					GOAL/Commands 	output

Code Review					pmd						mvn pmd:pmd		pmd.xml report	

test reports				surefire				mvn test		surefire reports - xml,txt

Code coverage				JACOCO,sonarcube		mvn sonar:sonar



Structure MAVEN project

src/main/java   ==> source code will be present
src/test/java   ==> test cases will be present

pom.xml   ==> heart of maven project

 1. dependencies   ==> tools downloded by developer to write code
 2. plugin information


Demo 3: Maven Integration with jenkins:
===============================

Integrate maven tool with Jenkins

Jenkins dashboard --> Manage Jenkins-->Click on Global Tool configuration

Under GIT==> leave it same 

Scroll down to Maven section

Under maven ==> Click on Add maven button
Type name as ⇒  mymaven 
and keep the checkbox install automatically checked.

Save the changes

==========================================



Demo 4: Create a Freestyle job to package the java code and generate an artifact.

 Package Job
***************************

**********************************
Job Package Job
***************************

Go to jenkins--> new item--> Name= Package==> freestyle project
==> source codemanagement==>select git==> give git repo name https://github.com/Sonal0409/DevOpsCodeDemo.git
 
build ==> invoke top level maven target==>in drop down select ⇒mymaven

 goal = clean install package

==> save==> build now
==> click on build number and see the console

==> go to workspace ==> target/addressbook.war

=======================================================================

Demo 5: Create a Continuous Integration pipeline:

pipelines Using plugins are called as Plugin based pipelines or Upstream and downstream pipelines
These pipelines are created using freestyle jobs.

Jenkins allows us to create multiple task in one single job.

Whenever a user has to perfom set of tasks one after other (in a sequence) or in parallel, it can easily be done using 
pipleine project template in jenkins

Pipleines in jenkins are nothing but set of task executed in sequence(by default) 

When a user is creating a pipeline we will have to write code for it.
The pipeline code is based on Groovy scripting which is Domain specific lanaguage
In jenkins pipeline code using 2 types of syntax

 > scripted pipeline syntax
=======================================
> scripted pipeline syntax always starts with a keyword called as node
> When Jenkins version1 came in to the market, the admin used scripted pipeline syntax to write pipeline code
> scripted pipeline syntax is difficult to read and write.
> there is no structure or no definite style which writitng the code
> The code written scripted pipeline syntax is not validated by jenkins
> This syntax is no longer used
> if the pipeline fails, you have to run the pipeline from the begining

 > Declarative pipeline syntax
========================================
> Declarative pipeline syntax always starts with a keyword called as pipeline
> With jenkins version2, Declarative pipeline syntax was introduced
> This is well structured syntax, where user is provided with definite pipeline sections
> we need to just declare the pipeline code
> It declarative in nature, syntax is very simple
> if the pipeline failes, you can restart the pipeline form the point that it had failed previously
> Stages in pipeline means Job to be executed
> Every stage will have a Name in the pipeline, steps to be executed, post build steps, 
> jenkins provides a pipeline code snippet generator, that helps your to learn pipeline scripting very fast

Syntax:  key 'value' 
for example: name 'Jenkins'
             sh 'echo "hello All"'

==============================

Demo:
=====================================


pipeline{
    
    tools{
        maven 'mymaven'
    }
   // in agent any = any available server 
    agent any
   stages{
       stage('Clone a Repo'){
           steps{
               git 'https://github.com/Sonal0409/DevOpsCodeDemo.git'
           }
       }
       
       stage('Compile the code'){
           steps{
               sh 'mvn compile'
           }
       }
       
       stage('CodeReview'){
           steps{
               sh 'mvn pmd:pmd'
           }
       }
       
       stage('Unit Test'){
           steps{
               sh 'mvn test'
           }
       }
       
       stage('Package'){
           steps{
               sh 'mvn clean install package'
           }
       }
       }
}

Jenkinsfile – pipeline code in github repo

Job in jenkins → fetch the script from github and build the pipeline
