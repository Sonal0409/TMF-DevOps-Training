Installation of Kubernetes on the Lab:
===================================================
Step 1:

### INSTALL/Upgrade DOCKER 

# sudo su -
# sudo apt-get update
# sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
# sudo apt-get update ; clear
# sudo apt-get install -y docker-ce

# sudo vi /etc/docker/daemon.json

Press i and insert below content

{
	"exec-opts": ["native.cgroupdriver=systemd"]
}

Save the file.

sudo service docker restart



Step 2: 

### INSTALL KUBEADM,KUBELET,KUBECTL


echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-get update ; clear
sudo apt-get install -y kubelet kubeadm kubectl	

Step3: [ needs to be done on Master node]

##### Initiate Kube cluster

sudo kubeadm init --ignore-preflight-errors=all

Step 4:

#### Setup the environment Variables

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


Step 5:
## set up the  Calico network

sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml


Step 6:

#### check if Kube Master is ready or not

# kubectl get nodes

=================================================================
Create a POD
===============================

$ kubectl run pod1 --image nginx

$ kubectl describe pod pod1 | less

Press q to come out
You will observe that your pos is not scheduled and has failed

To schedule the pods on the Master machine 

$ kubectl get nodes

=============================

To schedule the pods on the Master machine 
===========================================
$ kubectl get nodes

Copy the Nodename : ip-172-31-28-125

$ kubectl describe node  <nodeName>

$ kubectl describe node  ip-172-31-28-125

Copy the taints value

node-role.kubernetes.io/master:NoSchedule


We need to remove the taints, so that pods can be scheduled on the master

To remove the taint

$ kubectl taint node <node_name> <taintname>-

$ kubectl taint node ip-172-31-17-49 node-role.kubernetes.io/master:NoSchedule-

ip-172-31-17-49

Taint will be removed.



Lets create a new pod and check if it is scheduled on the master or not

$ kubectl run pod2 --image nginx

$ kubectl get pods

Will give number of pods available in the cluster

$ kubectl get pods -o wide

To know on which node your pods are scheduled

$ kubectl delete pod pod1

To delete one pod 
$ kubectl delete pods --all
All pods will be deleted

=================================
Pod definition file:
=================================

# mkdir mykubefiles && cd mykubefiles
# vim pod-defintion.yml

apiVersion: v1
kind: Pod
metadata:
name: mypod
 labels:
  author: sonal
  app: java
  type: webserver
spec:
 containers:
  - name: c1
    image: nginx

Save the file

Execute below command:

# kubectl create -f  pod-defintion.yml

# kubectl describe pod mypod


OR

kubectl create -f https://raw.githubusercontent.com/Sonal0409/Caltech-Devops-Batch-July/main/kubernetes/pod-defintion.yml




======================================

# vim multicontainer.yml

apiVersion: v1
kind: Pod
metadata:
 name: multipod
 labels:
  role: dev
spec:
 containers:
  - name: c1
    image: nginx
  - name: c2
    image: tomcat
  - name: c3
    image: ubuntu
    command: ["bash", "-c", "sleep 6000"]


# kubectl create -f multicontainer.yml

# kubectl get pods

====================================

Assignment:
===========================
ReplicaSet:

======================

vim replicaset.yml

apiVersion: apps/v1
kind: ReplicaSet
metadata: 
 name: myrs
spec:
 replicas: 3
 selector: # This is used to query the cluster before creating the replicas
  matchLabels:
   type: webserver
 template: # this is pod template using which replicas will be created
  metadata:
   labels: # purpose of labels is to group replicas for quering in cluster
    type: webserver
    author: sonal
  spec: # this is specification of pod/replica
   containers:
    - name: c1
      image: nginx

# kubectl create -f  <filename>

# kubectl get all

Scale up pods:

# kubectl scale replicaset myrs --replicas=4


Scale down

# kubectl scale replicaset myrs --replicas=2

================================================================



