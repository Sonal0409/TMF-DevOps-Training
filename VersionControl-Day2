Version Control with GIT
********************
Extra command:
=========================
Check if we have git installed or not on lab

$ sudo su -
$  git --version
  
git version 2.34.1

If git is not installed use following commands to install in it

Install git on ubuntu OS

 apt-get install git -y

Install git on Centos OS

yum install git -y

Install git on windows OS

https://git-scm.com/download/win




Scenario 1:
=============================================
Create a working directory

$ sudo su -
$ mkdir myproject
$ cd myproject

Create a file inside the directory

$ touch index1.html index2.html



Initialize git on the working directory

$ git init


This command will create a .git folder

$ ls -al



Execute:
# git status 

It will show that the 2 files are untracked.
We have to commit them to local repository


Scenario 3:
==================================
Configure git for username and email :

$ git config --global user.name Name
$ git config --global user.email emailid



3 types of configurations:

System – config are available for every user and its repos
Only if you set system configuration, you can see the variables at the following location:
$ cat /etc/gitconfig
Global  – config are available only to the current user and its repo
If you set config global , you can see the data in the file:
$ cat ~/.gitconfig

Local - config available for the current dir only

The configuration will be in file

$ cat .git/config

Edit the configurations

$ git config --global --edit

Remove configurations: DO NOT execute this.

$ git config --global --unset user.name


Scenario 3:
=====================================
Add file from working directory to local repo

See the status of current working directory
$ git status 

Add the unstagged file to staging area

$ git add index1.html index2.html

$ git status ⇒ check file is in staging area

Commit the files or changes to LR
$ git commit -m “file added”

Check files in Local repo

$ git ls-files

See the commit history:

$ git log

See the history of every commit in a single line

$ git log --oneline









Scenario 4:
========================================

Modify an existing file that is already being tracked and add the changes to the repo

$ vim index1.html ⇒ insert data and save the file

$ git status   ⇒ changes will in red
$ git add index1.html
$ git status  ⇒ changes will in green
$ git commit -m “modifcation added”

[OR]

$ vim index1.html
Add some content , save the file
To save the file
Press ESC key
Then press  :wq 
Press enter key

$ git status ⇒ red color
$ git commit -a -m “added modification”


Scenario 5:
================================
$ git log 

$ git log --oneline

$ git log --oneline -M --stat --follow -- index1.html

$ git show commit id ⇒ will display what changes were done in this commit




Scenario 6:
=================================
See the difference between version of a existing tracked file

$ git diff filename1 filename2

Scenario 7:  ASSIGNMENT

******

If you want certain files not to be version controlled then git can ignore them

Now you will have to create a .gitignore file 

In this file add the name of the files that are not to be tracked by



Create 2 files 
$ touch file1.txt file2.xml

We want these files to be ignored

Create .gitignore file

$ vim .gitignore

Add filename to be ignored

*.xml
*.txt

Save the file

Now give

$ git status

You will see both the files txt and xml are not being tracked by git
However .gitignore is a file that has to be tracked

So 
$ git add .gitignore
$ git commit -m “added .gitignore”



  
=========================================================
Revert 

Revert is a command in git that will work on commit id
It will bring back to changes to its previous state
Revert command will also generate a commit id, to track what changes have been reverted.



# sudo su -
# cd myproject

Step 1: we will delete a file which is present in local repo as well as in working directory using git

$ git ls-files
$ git rm index1.html



Step 2: commit the deletion of file in git


git commit -a -m "deleted file index.html"



step 3: check the commit id generated

$ git log --oneline

step 4: check what happened in the deleted commit id [optional]

$ git show <commit id>

in this commit we have deleted index1.html



step 5:  revert the changes that occured in a commit to its previous state 

This command always works for the commit id

 #  git revert <deleted file commitid>


As we revert in git, we are making changes again to Local repo,
Automatically git will open a nano editor for you
there enter some message (telling why are your reverting)
save the file with the message. 
Press CTL X  >>>>  press y  >>> press enter key

a new commit will be generated for the revert action

Execute below command to see index1.html file in WD and LR

# ls
# git ls-files

=========================================



Branching & Merging
==========================

Command to see how many branches do we have in out local repo:

$ git branch


$ git status ⇒ working tree should be clean


Command to create a branch with name as feature1

$ git branch feature1

Command to switch to branch with name feature1

$ git checkout feature1

Switched to branch feature1

Create a new file on the branch feature1

$ touch login

$ git status

Untracked file

$ git add login
$ git commit -m “on branch feature1”

$ git log --oneline

Merging the feature1 branch to master branch
========================

By merging we mean 

The source branch → login has commits that will be merged to destination branch master

Always Switch to the destination branch where we have to merge

$ git checkout master

$ git merge feature1 master

$ git log --oneline

All commits of login are present in master also, login file is also there on master branch

=====================================

Cherry-pick command: Assignment
=======================================

To check all the commits present in feature branch but not present in master branch

#  git log --oneline master..feature1



Allows a user to pick selected commit ids and merge only those changes to destination branch

# git checkout master

# git cherry-pick commitid1 commitid2



=================================

Rename a branch
**********

$ git branch -M <oldname> <newname>

Eg: git branch -M feature1 f1



Delete the branch
**************

> you cannot delete the branch, if you are currently on the same branch that you are deleting
> switch to another branch to delete any branch


Lets delete the branch after merging to master.

$ git branch -d branchname

Delete a branch before merging with master

$ git branch -D branchname



*********************************************

Remote Repository:

Sign up by creating a username and password on github

https://github.com/

Enter username and password and successfully log on to github.
*****************


—--------------


Create personal Access Token on github
***************

This is needed for authentication while pushing files from local repo to remote repo

Go to your UserDetails - right side  top corner 
Click on Settings —>After this → Scroll down, Left side you will select Developer settings option
On the left side click on Personal Access tokens (classic)
Click on generate new token button
[sometimes you may be prompted to enter github password , pls enter that]

Provide Following details :
 A token name under Note -> token1
Expiration : give anything
Select Scope: Click on checkbox for Repo
Click on Generate token  and copy the token and save it in a notepad. We will use it latter

*******************


Create a Remote repository
==========================


Click on + sign on right side and select New repository

OR

Click on new button (green color) on left side 

New repository page will open

Give a unique repository name like DemoProject18Nov

It should be a Public repo

Click on Create repository button

Remote repository is now created. 

Copy the https URL of the repository

Now let's connect Local repo to remote repo so as to share the local files
============================================
$ git checkout master

$ git status

Working tree to be clean

Check you are on master branch

$ git remote add origin [remote repo URL]

Check if remote details on local

$ git remote -v

Push files from local repo to remote repo
===================================

Command to push files from local to remote:

$ git push origin master

Username : you github username
Password : right click and paste the Personal access token created earlier

You will not be able to see the text of the personal access token in the password field. Just press enter, push will be successful.


Files will be pushed to remote repo, go to remote repo and check.


Pull the files from remote to local
==========================
Create a new file in github repo on Master branch
Commit the changes
Now go to local repo -> Master branch
$ git branch
$ git status ⇒ working tree to be clean
$ git pull origin master


Fetch the files from remote to local
===========================
Create a new file in github repo on Master branch

Commit the changes

Now go to local repo -> Master branch
$ git branch
$ git status ⇒ working tree to be clean

$ git fetch origin master

It will just fetch the changes and will not merge to the local repo or to the working directory.




Clone a repository from remote to local
=============================

Create a new directory

$ cd
$ git clone <repopath>
$ ls
You will see a folder with same name as remote repository name
Copy of remote files are available in local



Fork a repo:
========================
Go to repository :


A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.

And  Click on the fork button in github to copy a remote repo in to your github account.

You will see the git hub repo is now available in your github account too.

